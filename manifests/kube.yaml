apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-api
  namespace: default
  labels:
    app:  python-api
spec:
  selector:
    matchLabels:
      app: python-api
  replicas: 1
  template:
    metadata:
      labels:
        app:  python-api
    spec:
      containers:
      - name:  python-api
        image: amicutzu/reservation-app:auth
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        ports:
        - containerPort:  81
      - name:  backend-api
        image: amicutzu/reservation-app:backend
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        ports:
        - containerPort:  82

      - name: postgres
        image: amicutzu/reservation-app:db
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "database"
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-data

      - name: grafana
        image: amicutzu/reservation-app:grafana
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-provisioning
          mountPath: /etc/grafana/provisioning
          readOnly: false


      - name: io
        image: amicutzu/reservation-app:io
        ports:
        - containerPort: 83

      - name: prometheus
        image: amicutzu/reservation-app:prometheus
        ports:
        - containerPort: 9090

      - name: portainer
        image: portainer/portainer-ce:latest
        ports:
        - containerPort: 9443  # HTTPS Port
        - containerPort: 9000  # HTTP
        volumeMounts:
        - name: portainer-data
          mountPath: /data

      - name: pgadmin
        image: dpage/pgadmin4
        ports:
        - containerPort: 80  # Internal port for pgAdmin
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          value: your_email@example.com
        - name: PGADMIN_DEFAULT_PASSWORD
          value: your_password
        - name: PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION
          value: False

      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data-pvc
      - name: grafana-provisioning
        persistentVolumeClaim:
          claimName: grafana-provisioning-pvc
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      - name: portainer-data
        persistentVolumeClaim:
          claimName: portainer-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: python-api-service
  namespace: default
spec:
  selector:
    app: python-api
  type: LoadBalancer
  ports:
  # AUTH SERVICE
  - name: auth
    protocol: TCP
    port: 81
    targetPort: 81
    nodePort: 31000
  # BACKEND API
  - name: backend
    protocol: TCP
    port: 82
    targetPort: 82
    nodePort: 32000
  # IO SERVICE
  - name: io
    protocol: TCP
    port: 83
    targetPort: 83
    nodePort: 31500
  # PROMETHEUS
  - name: prometheus
    protocol: TCP
    port: 9090       # External port
    targetPort: 9090 # Prometheus container port
  # PORTAINER
  - name: portainer
    port: 9000
    targetPort: 9000
    nodePort: 31005  # Accessible on Minikube
  # PGADMIN
  - name: pgadmin
    protocol: TCP
    port: 5050       # External port
    targetPort: 80   # Port inside the container
    nodePort: 31050  # Fixed NodePort for consistency
  - name: grafana
    protocol: TCP
    port: 80           # External port to expose Grafana
    targetPort: 3000
    nodePort: 30555
