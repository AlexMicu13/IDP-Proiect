version: '3.7'

services:
  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "9443:9443"
    volumes:
      - data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - internal
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.2"
          memory: 50M
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "database"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - internal
      - db
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.role==manager"
      restart_policy:
        condition: on-failure

  io_service:
    image: stefanjumarea/idp-io
    restart: always
    ports:
      - "5002:80" # Change 5000 to any desired port number
    networks:
      - internal
      - db
      - db-auth
      - db-backend
    depends_on:
      - postgres
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.2"
          memory: 50M
      restart_policy:
        condition: on-failure

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: your_email@example.com
      PGADMIN_DEFAULT_PASSWORD: your_password
    ports:
      - "5050:80" # Change 5050 to any desired port number
    networks:
      - internal
      - db
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.2"
          memory: 50M
      restart_policy:
        condition: on-failure

  flask-service:
    image: stefanjumarea/idp-backend
    restart: always
    depends_on:
      - io_service
    networks:
      - internal
      - db-backend
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: "0.2"
          memory: 50M
      restart_policy:
        condition: on-failure

  auth-service:
    image: stefanjumarea/idp-auth
    restart: always
    depends_on:
      - io_service
    networks:
      - internal
      - db-auth
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.2"
          memory: 50M
      restart_policy:
        condition: on-failure

  kong:
    image: kong:latest
    volumes:
      - ./kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 80:8000
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.2"
          memory: 50M
      placement:
          constraints: [node.role == manager]
    networks:
      - internal
      - logging

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana-provisioning/:/etc/grafana/provisioning
    ports:
      - 3000:3000
    user: "$UID:$GID"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - logging
      - db
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.2"
          memory: 50M

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - logging
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.2"
          memory: 50M


volumes:
  data:

networks:
  internal:
  db:
  db-auth:
  db-backend:
  logging:
